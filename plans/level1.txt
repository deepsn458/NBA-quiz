Project Requirements and Project Specifications (What hardware and software will you need to meet the requirements?)
Level 1: If unable to implement 'login' features, omit from the form elements


/home
Req 1: Is users visit homepage via GET request
        - Nav bar where users can register or log in
        - An alert that tells users to login in to save their stats
        - A button that user can click to play the game
        - A button that user can click to login
Spec 1: - Nav Bar with Bootstrap. /register and /login working with flask
        - Alert with Bootstrap Flask, Jinja: shows alert if GET request sent
        - Form element using html. /quiz and /login working with flask


/start
Req 2: -
        - "Complete as many questions as you can in 60 seconds"
        - "Press start when read"
       - When user clicks start button, redirects to /quiz
Spec 2: 
        - Form element with html, /quiz working with flask

/quiz
Req 2:  - 60 second timer that starts when page is loaded
        -    Question displayed with two options below
        -   when option is clicked: +1 is added to number of right or wrong answers AND new question and options are displayed
        -   Once timer runs out: Automatically redirected to another webpage
Spec 2: 
        - Timer implements with JS
        - Retrieval of questions randomely with Flask and SQL, Questions,options passed to webpage with Flask, HTML
        -- When button clicked:
            - Answer compared with "correct answer" for question (flask and sql)
            - A database with questions in order is made
            - Users answer is added to the database
            -  +1 added to right or wrong column SQL database through Flask
            - New question and options appear on the same page through JS/AJAX
        - Redirected to /results, working with Flask

/results
Req 3:  - Number of correct and incorrect results displayed on a table
        - Options to restart quiz, or see which answers were right and wrong

Spec 3: - Incorrect and Correct answers retrieved from SQL and displayed by flask
        - Routes for /start and /summary working with flask

/summary
Req 4:  - Correct and Wrong Answers displayed on table in order they were answered
        - Button to restart quiz

Spec 4: - Database created for user responses in /quiz is used (retrieved from SQL with Flask)
            - If user answer is marked wrong, row colored red (Logic handled by SQL, implemented on HTML)
        - Routes for /start working with Flask



Level 2: Full implementation: with 'login' features

create a new python file for registration and login forms

/register
Req 5: - Username field: Checks if user alr registered
                         Checks if name between 1 and 20 chars
        Password field: Checks if password has atleast 1 number and 1 letter and is between 1 and 20 chars
        Confirm Password field: Checks if passwords match
        Errors to be displayed upon submission
        Redirect to login page if successful, alert showing login successful
Spec 5 :- Validation handled with wtforms validation in flask. Display them correctly with Jinja2
        - Redirection and alerts handled by flask, display with html

/login
Req 6: - Username field: - checks if username matches a username in the database
        Password: Checks if password matches password associated with the username
Spec 6: - Comparing form with sql database handled by Flask

Plan
1) Learn how to operate VSCode locally and sync using git (DONE!)
2) Set up SSH key to submit project  (Done!)
3) Strengthen HTML, CSS skills (CS50 web) (Done!)
4) Strengthen Python and Flask skills
5) Design the basic structure of the web app using flask, css, html 
    app.py should be functional with all the necessary folders and routes (routes functionality can be filled out later) 
6) Learn to implement database with SQLAlchemy
7) Design the quiz database
10) Strengthen JavaScript Skills 
11) Add the necessary JS elements to enhance webpage